#+STARTUP: indent

#+OPTIONS: num:nil toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

# This pulls in shared options.
#+include: reveal_header.org :minlevel 1

#+Title: Org-Reveal Notebook Demo

* Org-Reveal Notebook Demo
#+ATTR_REVEAL: :data-markdown=true
#+begin_notes
Hello! Presenter notes!
#+end_notes

Elements you Might Need

[[../images/clojure.svg]]

* SICMUtils

#+begin_src clojure
(defn total-distance [x1 y1 x2 y2]
  (fn [xp]
    (+ (sqrt (+ (square (+ x1 xp))
                (square y1)))
       (sqrt (+ (square (- x2 (+ x1 xp)))
                (square y2))))))
#+end_src

#+RESULTS:
: #'prez/total-distance

#+REVEAL: split

#+begin_src clojure
(defn F [x y]
  (* (square x)
     (cube y)))

(defn G [x y]
  (up (F x y) y))

(defn H [x y]
  (F (F x y) y))
#+end_src

#+RESULTS:
| #'prez/F |
| #'prez/G |
| #'prez/H |

#+reveal: split

#+ATTR_REVEAL: :code_attribs data-line-numbers="1-2|3-4"
#+begin_src clojure :results wrap :exports both :cache yes
(let [f (down ((partial 0) F)
              ((partial 1) F))]
  (tex$$
   (f 'x 'z)))
#+end_src

#+RESULTS[d2b97f55b40d5a34c0735c8851fbd8881c7eef17]:
:results:
$$\begin{bmatrix}\displaystyle{2\,x\,{z}^{3}} \cr \cr \displaystyle{3\,{x}^{2}\,{z}^{2}}\end{bmatrix}$$
:end:

* Big Block with Title

#+REVEAL: split

math:

#+ATTR_REVEAL: :code_attribs data-line-numbers="1|3-6|7"
#+begin_src clojure
(defn angles->rect [l1 l2]
  (fn [[t [theta1 theta2]]]
    (let [x1    (* l1 (sin theta1))
          y1    (- (* l1 (cos theta1)))
          x2 (+ x1 (* l2 (sin (+ theta1 theta2))))
          y2 (- y1 (* l2 (cos (+ theta1 theta2))))]
      (up x1 y1 x2 y2))))
#+end_src

#+REVEAL: split

More code:

#+ATTR_REVEAL: :code_attribs data-line-numbers="3-5|8-10|13-15"
#+begin_src html
<table>
  <tr>
    <td>Apples</td>
    <td>$1</td>
    <td>7</td>
  </tr>
  <tr>
    <td>Oranges</td>
    <td>$2</td>
    <td>18</td>
  </tr>
  <tr>
    <td>Kiwi</td>
    <td>$3</td>
    <td>1</td>
  </tr>
</table>
</code></pre>
#+end_src

#+REVEAL: split

And some $\pi$ math:

$$
f(x) = f(a)+\frac{Df(a)}{1!}(x-a)+ \\
\frac{D^2f(a)}{2!}(x-a)^{2}+\frac{D^3f(a)}{3!}(x-a)^{3}+\cdots
$$

** A List

#+begin_comment
grow shrink roll-in fade-out highlight-red highlight-green highlight-blue appear

optionally set =:frag_idx (1 2 3)=
#+end_comment

#+ATTR_REVEAL: :frag (t fade-out highlight-red) :frag_idx (2 3 1)
- one
- two
- three

#+REVEAL: split

Another example:
#+ATTR_REVEAL: :frag (t)
- one
- two
- three

** Fragmented Contents


Make contents fragmented (show up one-by-one) by setting option =ATTR_REVEAL=
with property ":frag frag-style", as illustrated below.

#+ATTR_REVEAL: :frag zoom-in
Paragraphs can be fragmented.

#+ATTR_REVEAL: :frag zoom-in
- Lists can
- be fragmented.

#+ATTR_REVEAL: :frag zoom-in
Pictures, tables and many other HTML elements can be fragmented.

** Single Colored Background
   :PROPERTIES:
   :reveal_background: #123456
   :END:

* Background Image with Tex!

This slide has no image.

- but we do
- have a bulleted list

The next slide demos a full screen image.

# Totally great.
#+REVEAL: split data-background="../images/knuth_literate.jpeg"

* Image Embedding

# This will get us an image that stretches correctly, but can't be exported.
# Down the road figure out how to do this right.
#+REVEAL_HTML: <img class="r-stretch" src="../images/clojure.svg">

#+REVEAL: split
#+REVEAL_HTML: <img class="r-stretch" src="../images/knuth_literate.jpg">
