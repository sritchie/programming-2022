:PROPERTIES:
:Effort:   10
:END:
#+Startup: indent

#+OPTIONS: num:nil reveal_global_footer:t toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

#+Title: Lisp as Renaissance Workshop
#+Subtitle: A Lispy Tour through Mathematical Physics

#+begin_comment
Tasks:

for demos:

- [ ] tidy up the text inside each of the demos. (DONE I think?)

remaining slides

- [ ] explorables tweet?
- [ ] finish final conclusion slides etc

#+end_comment


* Lisp as Renaissance Workshop
#+begin_notes
Hi, I'm Sam! Been a lisper for many years
#+end_notes

A Lispy Tour through Mathematical Physics

[[https://samritchie.io/][Sam Ritchie]], Mentat Collective

* SICMUtils
#+begin_notes
- talk is about this library I've been working on...
- Clojure, CAS, many environments, these slides, for one
- lives everywhere
#+end_notes

#+REVEAL: split
#+begin_notes
- small demo!
- Generic operations, tex
- more later
#+end_notes

#+begin_src clojure :results value pp :exports both
[(+ (sin 'x) 'x) (+ (sin 12) 2)]
#+end_src

#+RESULTS:
: [(+ (sin x) x) 1.4634270819995652]
:

#+begin_src clojure :results wrap :exports both
(tex$$
 (up (square (cos (* 't 'phi)))
     (floor (* 4 'zeta))))
#+end_src

#+RESULTS:
:results:
$$\begin{pmatrix}\displaystyle{{\cos}^{2}\left(\phi\,t\right)} \cr \cr \displaystyle{\left\lfloor 4\,\zeta \right\rfloor}\end{pmatrix}$$
:end:

#+REVEAL: split
#+begin_notes
autodiff, types, symbols
actual code in the slides
#+end_notes

#+begin_src clojure :results wrap :exports both
(let [f (literal-function 'f (-> (UP Real Real) Real))]
  (tex$$
   ((D f) (up 'alpha_1 'alpha_2))))
#+end_src

#+RESULTS:
:results:
$$\begin{bmatrix}\displaystyle{\partial_0f\left(\begin{pmatrix}\displaystyle{{\alpha}_1} \cr \cr \displaystyle{{\alpha}_2}\end{pmatrix}\right)} \cr \cr \displaystyle{\partial_1f\left(\begin{pmatrix}\displaystyle{{\alpha}_1} \cr \cr \displaystyle{{\alpha}_2}\end{pmatrix}\right)}\end{bmatrix}$$
:end:

** ❤️ Open Source ❤️
#+begin_notes
lives online, same with these slides.
#+end_notes

https://github.com/sicmutils/sicmutils
#+REVEAL_HTML: <img width="100%" src="../images/sicmutils.png">
https://github.com/sritchie/programming-2022

* Agenda
#+begin_notes
- CODE can be a fantastic medium for communication.
- Code is a medium to communicate. But it’s also a medium we use to /build/
  systems.
- can perform itself!
- we get by fine, why does it matter?
#+end_notes

- Why build another CAS?
- Code as Communication?
- Literate Systems (and their problems)
- Why it matters
- What to do? + SICMUtils

* scmutils by GJS
#+begin_notes
- Based on scmutils by GJS, co-creator of Scheme...
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/gjs.jpg">

#+REVEAL: split
#+begin_notes
SICP quote, exciting for me.
#+end_notes
"*programs must be written for people to read*, and only incidentally for
machines to execute."

#+REVEAL_HTML: <small>~ Hal Abelson, Structure and Interpretation of Computer Programs</small>
#+REVEAL_HTML: <br><img height="300px" src="../images/sicp.jpeg">

* SICM and FDG
#+begin_notes
- Followed up SICP with SICM and FDG.
- scmutils is the iceberg below this system.
#+end_notes

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

* Motivation, Google X
#+begin_notes
- Excited about Bret Victor's work, explorable explanations
- kill the PDF!
- reading all these RL research papers...
- Port it to a browser-environment.
#+end_notes

** Disappointment @ X!
#+begin_notes
- tools for thought championed outside!
- but people in ML labs really hate their tools
- no lab notebook! snippets in chat

Thrashing around with python and build systems... that is NOT what folks finding
the deep principles behind QM were doing.
#+end_notes

* 19th Century Scientific Communication
#+begin_notes
- didn't used to be this way!
#+end_notes

** History of Vector Analysis
#+begin_notes
- the battle for representations, lovely writing
- complex numbers
- Quaternions
- Clifford algebra

Different than programming language battles, I think.
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/vector_analysis.jpeg">

#+REVEAL: split
#+begin_notes
Reminded me of this...
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/lisp_xkcd.jpeg">

* Code as Communication
#+begin_notes
- Code == medium to communicate
- also a medium we use to /build/ systems
- so it should have supercharged this demo ability... right?
#+end_notes

** Numerical Code as Communication?
#+begin_notes
- deep dive into numerical methods and here is what I've found.
- pick on this one function but representative

Brent's algo for univariate minimization.
#+end_notes

"We personally like Brent's algorithm for univariate minimization, as found on
pages 79-80 of his book 'Algorithms for Minimization Without Derivatives'. It is
pretty reliable and pretty fast, *but we cannot explain how it works*."

~ =scmutils=, /refman.txt/

** Brent's Book, 1973
#+begin_notes
Back to the [[https://maths-people.anu.edu.au/~brent/pub/pub011.html][original book]] from 1973: "Algorithms for Minimization without
Derivatives".
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/brent.jpg">

** FORTRAN: Numerical Recipes, 1986
#+begin_notes
1986! [[http://phys.uri.edu/nigh/NumRec/bookfpdf/f10-2.pdf][Numerical Recipes]], pretty good... basically a port.
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/numerical_recipes.jpg">

** C++: Boost, 2006
#+begin_notes
Then Boost, C++, comes later, used now:
- golden ratio woah!
- comments
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers="18|37-41|47-52|56-60|90-98"
#+begin_src cpp
template <class F, class T>
std::pair<T, T> brent_find_minima(F f, T min, T max, int bits, std::uintmax_t& max_iter)
   noexcept(BOOST_MATH_IS_FLOAT(T) && noexcept(std::declval<F>()(std::declval<T>())))
{
   BOOST_MATH_STD_USING
   bits = (std::min)(policies::digits<T, policies::policy<> >() / 2, bits);
   T tolerance = static_cast<T>(ldexp(1.0, 1-bits));
   T x;  // minima so far
   T w;  // second best point
   T v;  // previous value of w
   T u;  // most recent evaluation point
   T delta;  // The distance moved in the last step
   T delta2; // The distance moved in the step before last
   T fu, fv, fw, fx;  // function evaluations at u, v, w, x
   T mid; // midpoint of min and max
   T fract1, fract2;  // minimal relative movement in x

   static const T golden = 0.3819660f;  // golden ratio, don't need too much precision here!

   x = w = v = max;
   fw = fv = fx = f(x);
   delta2 = delta = 0;

   uintmax_t count = max_iter;

   do{
      // get midpoint
      mid = (min + max) / 2;
      // work out if we're done already:
      fract1 = tolerance * fabs(x) + tolerance / 4;
      fract2 = 2 * fract1;
      if(fabs(x - mid) <= (fract2 - (max - min) / 2))
         break;

      if(fabs(delta2) > fract1)
      {
         // try and construct a parabolic fit:
         T r = (x - w) * (fx - fv);
         T q = (x - v) * (fx - fw);
         T p = (x - v) * q - (x - w) * r;
         q = 2 * (q - r);
         if(q > 0)
            p = -p;
         q = fabs(q);
         T td = delta2;
         delta2 = delta;
         // determine whether a parabolic step is acceptable or not:
         if((fabs(p) >= fabs(q * td / 2)) || (p <= q * (min - x)) || (p >= q * (max - x)))
         {
            // nope, try golden section instead
            delta2 = (x >= mid) ? min - x : max - x;
            delta = golden * delta2;
         }
         else
         {
            // whew, parabolic fit:
            delta = p / q;
            u = x + delta;
            if(((u - min) < fract2) || ((max- u) < fract2))
               delta = (mid - x) < 0 ? (T)-fabs(fract1) : (T)fabs(fract1);
         }
      }
      else
      {
         // golden section:
         delta2 = (x >= mid) ? min - x : max - x;
         delta = golden * delta2;
      }
      // update current position:
      u = (fabs(delta) >= fract1) ? T(x + delta) : (delta > 0 ? T(x + fabs(fract1)) : T(x - fabs(fract1)));
      fu = f(u);
      if(fu <= fx)
      {
         // good new point is an improvement!
         // update brackets:
         if(u >= x)
            min = x;
         else
            max = x;
         // update control points:
         v = w;
         w = x;
         x = u;
         fv = fw;
         fw = fx;
         fx = fu;
      }
      else
      {
         // Oh dear, point u is worse than what we have already,
         // even so it *must* be better than one of our endpoints:
         if(u < x)
            min = u;
         else
            max = u;
         if((fu <= fw) || (w == x))
         {
            // however it is at least second best:
            v = w;
            w = u;
            fv = fw;
            fw = fu;
         }
         else if((fu <= fv) || (v == x) || (v == w))
         {
            // third best:
            v = u;
            fv = fu;
         }
      }

   }while(--count);

   max_iter -= count;

   return std::make_pair(x, fx);
}
#+end_src

** Python: Scipy, 2001
#+begin_notes

- 2001, [[https://github.com/scipy/scipy/blob/v1.5.4/scipy/optimize/optimize.py#L2078][python version]] of Brent
- don't use this, whitespace off
- comments in odd places
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers="31-42"
#+begin_src python
def optimize(self):
  # set up for optimization
  func = self.func
  xa, xb, xc, fa, fb, fc, funcalls = self.get_bracket_info()
  _mintol = self._mintol
  _cg = self._cg
  #################################
  #BEGIN CORE ALGORITHM
  #################################
  x = w = v = xb
  fw = fv = fx = func(*((x,) + self.args))
  if (xa < xc):
    a = xa
    b = xc
  else:
    a = xc
    b = xa
    deltax = 0.0
    funcalls += 1
    iter = 0
  while (iter < self.maxiter):
    tol1 = self.tol * np.abs(x) + _mintol
    tol2 = 2.0 * tol1
    xmid = 0.5 * (a + b)
    # check for convergence
    if np.abs(x - xmid) < (tol2 - 0.5 * (b - a)):
      break
    # XXX In the first iteration, rat is only bound in the true case
    # of this conditional. This used to cause an UnboundLocalError
    # (gh-4140). It should be set before the if (but to what?).
    if (np.abs(deltax) <= tol1):
      if (x >= xmid):
        deltax = a - x       # do a golden section step
      else:
        deltax = b - x
        rat = _cg * deltax
    else:                              # do a parabolic step
      tmp1 = (x - w) * (fx - fv)
      tmp2 = (x - v) * (fx - fw)
      p = (x - v) * tmp2 - (x - w) * tmp1
      tmp2 = 2.0 * (tmp2 - tmp1)
      if (tmp2 > 0.0):
        p = -p
        tmp2 = np.abs(tmp2)
        dx_temp = deltax
        deltax = rat
        # check parabolic fit
        if ((p > tmp2 * (a - x)) and (p < tmp2 * (b - x)) and
            (np.abs(p) < np.abs(0.5 * tmp2 * dx_temp))):
          rat = p * 1.0 / tmp2        # if parabolic step is useful.
          u = x + rat
          if ((u - a) < tol2 or (b - u) < tol2):
            if xmid - x >= 0:
              rat = tol1
            else:
              rat = -tol1
          else:
            if (x >= xmid):
              deltax = a - x  # if it's not do a golden section step
            else:
              deltax = b - x
              rat = _cg * deltax

      if (np.abs(rat) < tol1):            # update by at least tol1
        if rat >= 0:
          u = x + tol1
        else:
          u = x - tol1
      else:
        u = x + rat
        fu = func(*((u,) + self.args))      # calculate new output value
        funcalls += 1

        if (fu > fx):                 # if it's bigger than current
          if (u < x):
            a = u
          else:
            b = u
          if (fu <= fw) or (w == x):
            v = w
            w = u
            fv = fw
            fw = fu
          elif (fu <= fv) or (v == x) or (v == w):
            v = u
            fv = fu
          else:
            if (u >= x):
              a = x
            else:
              b = x
          v = w
          w = x
          x = u
          fv = fw
          fw = fx
          fx = fu

          iter += 1
 #################################
        #END CORE ALGORITHM
        #################################

        self.xmin = x
        self.fval = fx
        self.iter = iter
        self.funcalls = funcalls
#+end_src

** Scheme: 1987

#+begin_notes
Scheme? Sussman! Please!
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers="32-43"
#+begin_src scheme
;;; Brent's algorithm for univariate minimization -- transcribed from
;;; pages 79-80 of his book "Algorithms for Minimization Without Derivatives"

(define (brent-min f a b eps)
  (let ((a (min a b)) (b (max a b))
	(maxcount 100)
	(small-bugger-factor *sqrt-machine-epsilon*)
	(g (/ (- 3 (sqrt 5)) 2))
	(d 0) (e 0) (old-e 0) (p 0) (q 0) (u 0) (fu 0))
    (let* ((x (+ a (* g (- b a))))
	   (fx (f x))
	   (w x) (fw fx) (v x) (fv fx))
      (let loop ((count 0))
	(if (> count maxcount)
	    (list 'maxcount x fx count) ;failed to converge
	    (let* ((tol (+ (* eps (abs x)) small-bugger-factor))
		   (2tol (* 2 tol))
		   (m (/ (+ a b) 2)))
	      ;; test for convergence
	      (if (< (max (- x a) (- b x)) 2tol)
		  (list x fx count)
		  (begin
		    (if (> (abs e) tol)
			(let* ((t1 (* (- x w) (- fx fv)))
			       (t2 (* (- x v) (- fx fw)))
			       (t3 (- (* (- x v) t2) (* (- x w) t1)))
			       (t4 (* 2 (- t2 t1))))
			  (set! p (if (positive? t4) (- t3) t3))
			  (set! q (abs t4))
			  (set! old-e e)
			  (set! e d)))
		    (if (and (< (abs p) (abs (* 0.5 q old-e)))
			     (> p (* q (- a x)))
			     (< p (* q (- b x))))
			;; parabolic step
			(begin (set! d (/ p q))
			       (set! u (+ x d))
			       (if (< (min (- u a) (- b u)) 2tol)
				   (set! d (if (< x m) tol (- tol)))))
			;;else, golden section step
			(begin (set! e (if (< x m) (- b x) (- a x)))
			       (set! d (* g e))))
		    (set! u (+ x (if (> (abs d) tol)
				     d
				     (if (positive? d) tol (- tol)))))
		    (set! fu (f u))
		    (if (<= fu fx)
			(begin (if (< u x) (set! b x) (set! a x))
			       (set! v w) (set! fv fw)
			       (set! w x) (set! fw fx)
			       (set! x u) (set! fx fu))
			(begin (if (< u x) (set! a u) (set! b u))
			       (if (or (<= fu fw) (= w x))
				   (begin (set! v w) (set! fv fw)
					  (set! w u) (set! fw fu))
				   (if (or (<= fu fv) (= v x) (= v w))
				       (begin (set! v u) (set! fv fu))))))
		    (loop (+ count 1))))))))))
#+end_src

** Actual Core Idea
#+begin_notes
- here is the idea
- image isn't tied to code! pic wrong!

MEME from Clean Code...
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/brent_parabola.png">

** So What?
#+begin_notes
- all these methods are simple extensions of this!
- same with quadrature; huge gains from intuition
- huge TAX that we're paying
#+end_notes

- What's wrong with this?
- How can we do better?

* Existing Ideas
#+begin_notes
- approaches to code performing itself
#+end_notes

- Literate Programming
- LOGO's Microworlds
- Notebooks, Mathematica

#+REVEAL: split data-background="../images/knuth_literate.jpeg"
#+begin_notes
- Literate programming!
- many good books like this
#+end_notes

** LOGO's Microworlds
#+begin_notes
- Microworlds put you in the system!
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split
#+REVEAL_HTML: <img class="r-stretch" src="../images/turtle_geometry.jpeg">

** Notebooks, Mathematica
#+begin_notes
- notebooks is a beautiful idea
- pioneered my mathematica
#+end_notes

#+REVEAL_HTML: <img width="300" src="../images/mm_notebook.jpg">
#+REVEAL_HTML: <img width="300" src="../images/mathematica.svg">

* Why aren't these working?
#+begin_notes
- very hard to share the ENVIRONMENT
- hard to build a culture, 1 person thing
- sharing tools come from industry, not very creative
- science happens at the whiteboard!
- existing geared => presentation
- once it works we stop
- abstain from understanding
- so you lose all context
- no real work in notebooks
#+end_notes

#+ATTR_REVEAL: :frag (grow)
- Literate Programming == one-way
- Science is Multiplayer
- Dynamic is Too Seductive
- Real Work doesn't happen here

* Why care?
#+begin_notes
- crown jewels of society!
- long-term projects depend on transmission of culture
- With current, harder material => specialization, impressionistic
#+end_notes

** "Future of Education"
#+begin_notes
  We're all quite good at this abstraction thing, but that's not normal!
#+end_notes

- Mythic Understanding
- Romantic Understanding
- *Philosophic Understanding*
- Ironic Understanding

* What to do?
#+begin_notes
- I wanted to do something about this...
- what to make?
#+end_notes

** SICM and FDG as clues
#+begin_notes
- books paved the way
- hard narrative work is done, for these stories.
- SO: Browser based, Clojure, Lisp, build on sicm
#+end_notes

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

#+REVEAL: split data-background="../images/nurse_log.jpeg"
#+begin_notes
- textbook as Nurse Log, and library
- huge culture bundle
- exercises == invitation to publish
#+end_notes

** Explanation as Side Effect
#+begin_notes
- dream environment: you play, explanation comes for free
- good evidence from Roam etc for text
#+end_notes

* Euler-Lagrange Equations
#+begin_notes
example of a beautiful thing, least action
- interesting == beautiful observation
- less interesting == symbol-pushing
#+end_notes

$$S[q](t_a, t_b) = D \int_{t_a}^{t_b} L(t, q(t), Dq(t)) dt$$

$$D \int_{t_a}^{t_b} L(t, q(t), Dq(t)) dt = 0$$

** Euler-Lagrange Equations

#+begin_notes
this is the result, usual form.
anyone know the type?
#+end_notes

#+ATTR_REVEAL: :frag t :frag_idx 2
"What could this expression possibly mean?"

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

** Expand:
#+begin_notes
This is what is really going on.
#+end_notes

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

#+ATTR_REVEAL: :frag t
$$\frac{d}{d t}\left( \left.\frac{\partial L(t, q, \dot{q})}{\partial \dot{q}}
  \right|_{\substack{ {q=w(t)} \\ {\dot{q}=\frac{d w(t)}{d t}} }}
  \right)-\left.\frac{\partial L(t, q, \dot{q})}{\partial q}\right|_{ \substack{
  q=w(t) \\ {\dot{q}=\frac{d w(t)}{d t}}} }=0$$

** Okay, Fine
#+begin_notes
- fill in, replace with functional derivatives
#+end_notes

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial
q}=0$$

# Notice the trick I had to use to get alignment on the parentheses! On the
# first line, I had to insert \left. and \right. so that I wouldn't be sticking
# a & inside of a pair of delimeters. Ugh!
\begin{align*}
\frac{d}{d t} \left( \right. & \left. \left(\partial_{2} L\right)\left(t, w(t), \frac{d}{d t}
w(t)\right)\right) \\
 - & \left(\partial_{1} L\right)\left(t, w(t), \frac{d}{d t}
w(t)\right) = 0
\end{align*}

** Substitutions
#+begin_notes
- kill EXPRESSION derivative, replace again
- use Hamma since we can build from path
#+end_notes

$$(D f)(t)=\left.\frac{d}{d x} f(x)\right|_{x=t}$$

$$\Gamma[w](t)=\left(t, w(t), \frac{d}{d t} w(t)\right)$$

#+REVEAL: split
#+begin_notes
- get the explicit =t= out of there
- functional derivative
- write as code!
#+end_notes

#+ATTR_REVEAL: :frag none :frag_idx 1
$$\frac{d}{dt}\left(
\left(\partial_{2} L\right) \left(\Gamma[w](t)\right)
\right) - \left(\partial_{1} L\right) \left(\Gamma[w](t)\right)=0$$

#+ATTR_REVEAL: :frag t :frag_idx 2
$$D\left(\left(\partial_{2} L\right) \circ \left(\Gamma[w]\right)\right)
   \\ -\left(\partial_{1} L\right) \circ \left(\Gamma[w]\right)=0$$

#+ATTR_REVEAL: :frag t :frag_idx 3 :code_attribs data-line-numbers="1|2-4"
#+begin_src clojure :eval none
(defn Lagrange-equations [L]
  (fn [w]
    (- (D (comp ((partial 2) L) (Gamma w)))
       (comp ((partial 1) L) (Gamma w)))))
#+end_src

#+RESULTS:
: #'prez/Lagrange-equations

#+reveal: split
#+begin_notes
- you can call this!
- general form, F = ma
#+end_notes

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (- (comp (literal-function 'T) velocity)
           (comp (literal-function 'V) coordinate))
      w (literal-function 'w)]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[b86d9da391958ae3e17a47fae3d7a055e4c153b2]:
:results:
$${D}^{2}w\left(t\right)\,{D}^{2}T\left(Dw\left(t\right)\right) + DV\left(w\left(t\right)\right)$$
:end:

** Simple Harmonic Motion
#+begin_notes
Specific example:

w = angular frequency, radians/second
sqrt(k/m) equals the period for a harmonic oscillator
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers="7|8"
#+begin_src clojure
(defn L-harmonic
  "Returns a Lagrangian of a simple harmonic oscillator (mass-spring system).

  m is the mass and k is the spring constant used in Hooke's law."
  [m k]
  (fn [[_ q v]]
    (- (* 1/2 m (square v))
       (* 1/2 k (square q)))))
#+end_src

#+RESULTS:
: #'prez/L-harmonic

#+begin_src clojure
(defn proposed-solution [t]
  (* 'a (cos (+ (* 'omega t) 'phi))))
#+end_src

#+RESULTS:
: #'prez/proposed-solution

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (L-harmonic 'm 'k)
      w proposed-solution]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[4f07f32c756dd28df70e0637cdf4042082d89a06]:
:results:
$$- a\,m\,{\omega}^{2}\,\cos\left(\omega\,t + \phi\right) + a\,k\,\cos\left(\omega\,t + \phi\right)$$
:end:

** Hooke's Law
#+begin_notes
use literal function, get hooke's law:
#+end_notes

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (L-harmonic 'm 'k)
      w (literal-function 'w)]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[35ef84f7fbbe4c6366a9279e07dd2dc9b0454a4b]:
:results:
$$k\,w\left(t\right) + m\,{D}^{2}w\left(t\right)$$
:end:

* Clerk Demo
#+begin_notes
- spring first,
- the physics examples
- function examples
- the slides themselves have math generated by sicmutils
- Nextjournal environment
- Double Pendulum style essay...
- einstein's field equations, pre-load that into the system

Then I'll show you another one that is just bonkers.

- the library itself is written up as a series of computational essays that
  render in the browser.

SO, these "essays" are also little libraries!

You can publish them as little "research papers"
#+end_notes

Let's convince ourselves that that is true, by doing the spring demo in the
browser.

* Community

- Sussman et. al.
- Colin Smith
- Clerk: Martin Kavalar, Jack Rusher, Nextjournal team
- SCI: Michiel Borkent (@borkdude)
- Mathbox: Chris Chudzicki, Steven Wittens

* How to get involved? What's Next?
#+begin_notes
so why is this interesting?

- Lisp, the computational fluid, is something eery and special
- What are we going to do with it?
#+end_notes

- SICM and FDG: Executable Textbooks
- Full library as essays
- Collaborative editing, simulation
- Please Steal!

* Thanks!
#+begin_notes
questions?
#+end_notes

Sam Ritchie, Mentat Collective

[[https://twitter.com/sritchie][@sritchie]]

https://github.com/sritchie/programming-2022
