#+Startup: indent

#+OPTIONS: num:nil reveal_global_footer:t toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

# 1 hour total.
#+Title: Lisp as Renaissance Workshop

#+begin_comment
Tasks:

- [ ] merge remaining notes from below?
- [ ] add my name etc toslides.
- [ ] set a tiny slide footer
- [ ] vector analysis quote
- [ ] future of education thing?
- [ ] tidy up the text inside each of the demos.

#+end_comment
* Lisp as Renaissance Workshop
#+begin_notes
Hi, I'm Sam!

Going to talk about sicmutils.

And this idea that CODE can be a fantastic medium for communication. There is so
much promise:

Code is a medium to communicate. But it’s also a medium we use to /build/
systems.

To the extent that the system is self-describing, it also performs itself. So
there is huge promise for the idea of code as communication, and lots of
champions!

#+end_notes

A Lispy Tour through Mathematical Physics

Sam Ritchie, Mentat Collective

[[https://twitter.com/sritchie][@sritchie]]

* Talk's about SICMUtils
#+begin_notes
what is sicmutils? CAS...
#+end_notes

* Based on scmutils by GJS
#+begin_notes
you know GJS, but he's been doing more... tip of the iceberg.
#+end_notes

"*programs must be written for people to read*, and only incidentally for
machines to execute."

~ Hal Abelson, /Structure and Interpretation of Computer Programs/

* Why? Google X etc
#+begin_notes
Really fired up on Bret Victor's work, explorable explanations; kill the PDF!
#+end_notes

** Disappointment!
#+begin_notes
really hard to steer the ship
#+end_notes

* 19th Century Scientific Communication
#+begin_notes
It didn't used to be this way!

- [ ] vector analysis book, lispp

  It's important that these ideas are in the air, that we're proud of them as
  ideas we can take and /use/, not just... oh, tech vibes.
#+end_notes

* Numerical Computing Screenshots

"We personally like Brent's algorithm for univariate minimization, as found on
pages 79-80 of his book 'Algorithms for Minimization Without Derivatives'. It is
pretty reliable and pretty fast, *but we cannot explain how it works*."

~ scmutils, /refman.txt/

#+REVEAL: split
#+begin_notes
As an example - Brent's algo for univariate minimization.

I'm going to pick on this one function but scipy is all like this.

Back to the [[https://maths-people.anu.edu.au/~brent/pub/pub011.html][original book]] from 1973: "Algorithms for Minimization without
Derivatives".
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/brent.jpg">

#+REVEAL: split
#+begin_notes
1986! [[http://phys.uri.edu/nigh/NumRec/bookfpdf/f10-2.pdf][Numerical Recipes]], pretty good
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/numerical_recipes.jpg">

#+REVEAL: split
#+begin_notes
1986! [[http://phys.uri.edu/nigh/NumRec/bookfpdf/f10-2.pdf][Numerical Recipes]], pretty good
#+end_notes
#+REVEAL_HTML: <img class="r-stretch" src="../images/numerical_recipes.jpg">

#+REVEAL: split
#+begin_notes
Notes!
#+end_notes
#+ATTR_REVEAL: :code_attribs data-line-numbers="37-41|47-52|56-60|90-98"
#+begin_src cpp
template <class F, class T>
std::pair<T, T> brent_find_minima(F f, T min, T max, int bits, std::uintmax_t& max_iter)
   noexcept(BOOST_MATH_IS_FLOAT(T) && noexcept(std::declval<F>()(std::declval<T>())))
{
   BOOST_MATH_STD_USING
   bits = (std::min)(policies::digits<T, policies::policy<> >() / 2, bits);
   T tolerance = static_cast<T>(ldexp(1.0, 1-bits));
   T x;  // minima so far
   T w;  // second best point
   T v;  // previous value of w
   T u;  // most recent evaluation point
   T delta;  // The distance moved in the last step
   T delta2; // The distance moved in the step before last
   T fu, fv, fw, fx;  // function evaluations at u, v, w, x
   T mid; // midpoint of min and max
   T fract1, fract2;  // minimal relative movement in x

   static const T golden = 0.3819660f;  // golden ratio, don't need too much precision here!

   x = w = v = max;
   fw = fv = fx = f(x);
   delta2 = delta = 0;

   uintmax_t count = max_iter;

   do{
      // get midpoint
      mid = (min + max) / 2;
      // work out if we're done already:
      fract1 = tolerance * fabs(x) + tolerance / 4;
      fract2 = 2 * fract1;
      if(fabs(x - mid) <= (fract2 - (max - min) / 2))
         break;

      if(fabs(delta2) > fract1)
      {
         // try and construct a parabolic fit:
         T r = (x - w) * (fx - fv);
         T q = (x - v) * (fx - fw);
         T p = (x - v) * q - (x - w) * r;
         q = 2 * (q - r);
         if(q > 0)
            p = -p;
         q = fabs(q);
         T td = delta2;
         delta2 = delta;
         // determine whether a parabolic step is acceptable or not:
         if((fabs(p) >= fabs(q * td / 2)) || (p <= q * (min - x)) || (p >= q * (max - x)))
         {
            // nope, try golden section instead
            delta2 = (x >= mid) ? min - x : max - x;
            delta = golden * delta2;
         }
         else
         {
            // whew, parabolic fit:
            delta = p / q;
            u = x + delta;
            if(((u - min) < fract2) || ((max- u) < fract2))
               delta = (mid - x) < 0 ? (T)-fabs(fract1) : (T)fabs(fract1);
         }
      }
      else
      {
         // golden section:
         delta2 = (x >= mid) ? min - x : max - x;
         delta = golden * delta2;
      }
      // update current position:
      u = (fabs(delta) >= fract1) ? T(x + delta) : (delta > 0 ? T(x + fabs(fract1)) : T(x - fabs(fract1)));
      fu = f(u);
      if(fu <= fx)
      {
         // good new point is an improvement!
         // update brackets:
         if(u >= x)
            min = x;
         else
            max = x;
         // update control points:
         v = w;
         w = x;
         x = u;
         fv = fw;
         fw = fx;
         fx = fu;
      }
      else
      {
         // Oh dear, point u is worse than what we have already,
         // even so it *must* be better than one of our endpoints:
         if(u < x)
            min = u;
         else
            max = u;
         if((fu <= fw) || (w == x))
         {
            // however it is at least second best:
            v = w;
            w = u;
            fv = fw;
            fw = fu;
         }
         else if((fu <= fv) || (v == x) || (v == w))
         {
            // third best:
            v = u;
            fv = fu;
         }
      }

   }while(--count);

   max_iter -= count;

   return std::make_pair(x, fx);
}
#+end_src

#+REVEAL: split
#+begin_notes
#+end_notes

2001? here’s the python version of Brent
https://github.com/scipy/scipy/blob/v1.5.4/scipy/optimize/optimize.py#L2078

And probably delete some of the previous...

#+REVEAL: split
#+begin_notes
Scheme!
#+end_notes
#+ATTR_REVEAL: :code_attribs data-line-numbers="32-43"
#+begin_src scheme
;;; Brent's algorithm for univariate minimization -- transcribed from
;;; pages 79-80 of his book "Algorithms for Minimization Without Derivatives"

(define (brent-min f a b eps)
  (let ((a (min a b)) (b (max a b))
	(maxcount 100)
	(small-bugger-factor *sqrt-machine-epsilon*)
	(g (/ (- 3 (sqrt 5)) 2))
	(d 0) (e 0) (old-e 0) (p 0) (q 0) (u 0) (fu 0))
    (let* ((x (+ a (* g (- b a))))
	   (fx (f x))
	   (w x) (fw fx) (v x) (fv fx))
      (let loop ((count 0))
	(if (> count maxcount)
	    (list 'maxcount x fx count) ;failed to converge
	    (let* ((tol (+ (* eps (abs x)) small-bugger-factor))
		   (2tol (* 2 tol))
		   (m (/ (+ a b) 2)))
	      ;; test for convergence
	      (if (< (max (- x a) (- b x)) 2tol)
		  (list x fx count)
		  (begin
		    (if (> (abs e) tol)
			(let* ((t1 (* (- x w) (- fx fv)))
			       (t2 (* (- x v) (- fx fw)))
			       (t3 (- (* (- x v) t2) (* (- x w) t1)))
			       (t4 (* 2 (- t2 t1))))
			  (set! p (if (positive? t4) (- t3) t3))
			  (set! q (abs t4))
			  (set! old-e e)
			  (set! e d)))
		    (if (and (< (abs p) (abs (* 0.5 q old-e)))
			     (> p (* q (- a x)))
			     (< p (* q (- b x))))
			;; parabolic step
			(begin (set! d (/ p q))
			       (set! u (+ x d))
			       (if (< (min (- u a) (- b u)) 2tol)
				   (set! d (if (< x m) tol (- tol)))))
			;;else, golden section step
			(begin (set! e (if (< x m) (- b x) (- a x)))
			       (set! d (* g e))))
		    (set! u (+ x (if (> (abs d) tol)
				     d
				     (if (positive? d) tol (- tol)))))
		    (set! fu (f u))
		    (if (<= fu fx)
			(begin (if (< u x) (set! b x) (set! a x))
			       (set! v w) (set! fv fw)
			       (set! w x) (set! fw fx)
			       (set! x u) (set! fx fu))
			(begin (if (< u x) (set! a u) (set! b u))
			       (if (or (<= fu fw) (= w x))
				   (begin (set! v w) (set! fv fw)
					  (set! w u) (set! fw fu))
				   (if (or (<= fu fv) (= v x) (= v w))
				       (begin (set! v u) (set! fv fu))))))
		    (loop (+ count 1))))))))))
#+end_src

** Actual Goal
#+begin_notes
check in [[http://phys.uri.edu/nigh/NumRec/bookfpdf/f10-2.pdf][Numerical Recipes]], for what this is doing, make sure I can actually
describe how this thing finds the minimum.

But this image isn't tied to the code! There have been systems to do that...
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/brent_parabola.jpg">

* Attempts! There are attempts!

- Logo
- Mathematica's notebooks
- Notebooks!
- Explorable Explanations
- Literate Programming

* Why aren't people doing this?

If all this is software great, what are we doing?



* Why does it matter?
#+begin_notes
These are the crown jewels!

We have many problems left that this computational fluid seems quite useful for.

not to mention that this is a beautiful THING we have figured out how to do,
this sense that abstraction is all around. If it is true of the universe where
we’re living, music, art, wow, better practice.

The ability to do long term projects depends on the transmission of culture over
long distances and times. With our current stuff, the harder the material gets,
the more specialized the field gets, the more impressionistic the notation gets.
#+end_notes

* Explanation as Side Effect

Zettelkasten. Then you go tidy it up for someone else.

* What to make?
#+begin_notes
#+end_notes

** SICM and FDG as clues

these books had actually paved the way!

Browser based, Clojure, Lisp, build on sicm

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

** Textbook as Nurse Tree

Get a picture of a nurse log...

* Lagrange Equation Demo
#+begin_notes
This is a good section to talk about the Sussman pitch on Code as Comms.

Go from:

- Lagrange equations, let's say WHAT WE MEAN
- the expanded version
- the clojure code
- the animation

This has pretty crappy flow now but I think this section is a pretty important
one, to talk about what it MEANS to say that code can communicate.

BY THE WAY, the way you derive this is just bananas, such a great way to THINK.

- [ ] so add a slide about the integral T-V vs where you get...

you'll find you might get sleepy for a few slides; but I will own it by saying
that is kind of the point!

What is interesting here is this fundamentally amazing, beautiful observation.
What is less interesting is the symbol-pushing and accounting /after/ you've
realized.
#+end_notes

#+ATTR_REVEAL: :frag t :frag_idx 2
What could this expression possibly mean?
#+ATTR_REVEAL: :frag t :frag_idx 1
$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

#+REVEAL: split

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

#+ATTR_REVEAL: :frag t
$$\frac{d}{d t}\left( \left.\frac{\partial L(t, q, \dot{q})}{\partial \dot{q}}
  \right|_{\substack{ {q=w(t)} \\ {\dot{q}=\frac{d w(t)}{d t}} }}
  \right)-\left.\frac{\partial L(t, q, \dot{q})}{\partial q}\right|_{ \substack{
  q=w(t) \\ {\dot{q}=\frac{d w(t)}{d t}}} }=0$$

** Okay, Fine
#+begin_notes
Development now of the better notation.

Describe "expression derivatives" vs function derivatives.
#+end_notes

# Notice the trick I had to use to get alignment on the parentheses! On the
# first line, I had to insert \left. and \right. so that I wouldn't be sticking
# a & inside of a pair of delimeters. Ugh!
\begin{align*}
\frac{d}{d t} \left( \right. & \left. \left(\partial_{2} L\right)\left(t, w(t), \frac{d}{d t}
w(t)\right)\right) \\
 - & \left(\partial_{1} L\right)\left(t, w(t), \frac{d}{d t}
w(t)\right) = 0
\end{align*}

#+REVEAL: split
#+begin_notes
So let’s get rid of the expression derivative $d/dt$ and replace it with an
appropriate functional derivative. If $f$ is a function then we will write
$Df$ as the new function that is the derivative of $f$
#+end_notes

$$(D f)(t)=\left.\frac{d}{d x} f(x)\right|_{x=t}$$

#+REVEAL: split
#+begin_notes
To do this for the Lagrange equation we need to construct a function to take
the derivative of.

our friend Gamma...
#+end_notes

$$\Gamma[w](t)=\left(t, w(t), \frac{d}{d t} w(t)\right).$$

#+REVEAL: split
#+begin_notes
That lets us simplify a bit more.
Finally, let's get the explicit =t= out of there.
then, program
#+end_notes

#+ATTR_REVEAL: :frag none :frag_idx 1
$$\frac{d}{dt}\left(
\left(\partial_{2} L\right) \left(\Gamma[w](t)\right)
\right) - \left(\partial_{1} L\right) \left(\Gamma[w](t)\right)=0$$

#+ATTR_REVEAL: :frag t :frag_idx 2
$$D\left(\left(\partial_{2} L\right) \circ \left(\Gamma[w]\right)\right)
   \\ -\left(\partial_{1} L\right) \circ \left(\Gamma[w]\right)=0$$

#+ATTR_REVEAL: :frag t :frag_idx 3 :code_attribs data-line-numbers="1|2-4|3|4"
#+begin_src clojure :eval none
(defn Lagrange-equations [L]
  (fn [w]
    (- (D (comp ((partial 2) L) (Gamma w)))
       (comp ((partial 1) L) (Gamma w)))))
#+end_src

#+RESULTS:
: #'prez/Lagrange-equations

#+REVEAL: split
#+begin_notes
Maybe cut this, I don't know if it's a good example.
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers="7|8"
#+begin_src clojure
(defn L-harmonic
  "Returns a Lagrangian of a simple harmonic oscillator (mass-spring system).

  m is the mass and k is the spring constant used in Hooke's law."
  [m k]
  (fn [[_ q v]]
    (- (* 1/2 m (square v))
       (* 1/2 k (square q)))))
#+end_src

#+RESULTS:
: #'prez/L-harmonic

#+begin_src clojure
(defn proposed-solution [t]
  (* 'a (cos (+ (* 'omega t) 'phi))))
#+end_src

#+RESULTS:
: #'prez/proposed-solution

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (L-harmonic 'm 'k)
      w proposed-solution]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[4f07f32c756dd28df70e0637cdf4042082d89a06]:
:results:
$$- a\,m\,{\omega}^{2}\,\cos\left(\omega\,t + \phi\right) + a\,k\,\cos\left(\omega\,t + \phi\right)$$
:end:

#+reveal: split
#+begin_notes
Boom, we have F = ma, because F = ma has to be true. So we have Hooke's law
here.
#+end_notes

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (L-harmonic 'm 'k)
      w (literal-function 'w)]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[35ef84f7fbbe4c6366a9279e07dd2dc9b0454a4b]:
:results:
$$k\,w\left(t\right) + m\,{D}^{2}w\left(t\right)$$
:end:


#+reveal: split
#+begin_notes
Actually you can look at the general form... but the POINT is that it's
confusing!!!
#+end_notes

#+begin_src clojure :results wrap :exports both :cache yes
(let [L (- (comp (literal-function 'T) velocity)
           (comp (literal-function 'V) coordinate))
      w (literal-function 'w)]
  (tex$$
   (((Lagrange-equations L) w) 't)))
#+end_src

#+RESULTS[b86d9da391958ae3e17a47fae3d7a055e4c153b2]:
:results:
$${D}^{2}w\left(t\right)\,{D}^{2}T\left(Dw\left(t\right)\right) + DV\left(w\left(t\right)\right)$$
:end:


* SICMUtils / Clerk Demo

That was not very clear! So let's convince ourselves that that is true, by doing
the spring demo in the browser.

- spring demo
- the physics examples
- function examples
- John video?
- THE LIBRARY ITSELF is written
   - show autodiff, numerical methods
- the slides themselves have math generated by sicmutils
- Nextjournal environment
- Double Pendulum style essay...
- einstein's field equations, pre-load that into the system

Then I'll show you another one that is just bonkers.

- the library itself is written up as a series of computational essays that
  render in the browser.

SO, these "essays" are also little libraries!

You can publish them as little "research papers"

* Community

- Sussman! Wisdom!
- Colin Smith, founded SICMUtils
- Mentat Collective: Brad Feld and John Underkoffler
- Clerk: Martin Kavalar, Jack Rusher, Nextjournal team

* How to get involved? What's Next?
#+begin_notes
so why is this interesting?

Basically we know the material is good — so how compelling AND SIMULTANEOUSLY
USEFUL can we make the presentation? Fascinating all the way down! the workshop!
#+end_notes

- Collaborative editing, simulation
- Full library as essays
- Steal the pieces!

* Conclusion

Lisp, the computational fluid, is something eery and special. It’s not
/everything/; remember, these are just models! But it’s a big deal.

What are we going to do with it?

the whole industry is so frothy, money, excitement, gleefully jettisoning the
original values. Which is all great, of course, except it seems like it’s not
/allowed/ to go work on inspiring stuff, even though there is far more money.

At the same time, what, we’re gonna change the world by working on developer
tools?

* First Take at this:

** Why code as comms:

Knowledge does not __live__in the symbols; it lives in the culture. It lives by
being taught.

Code is a medium to communicate. But it’s also a medium we use to /build/
systems.

To the extent that the system is self-describing, it also performs itself. So
there is huge promise for the idea of code as communication, and lots of
champions!

SICP slide, SICP quote from my other keynote.

I'll be talking about:

*** What do we do now?

A PROBLEM here is that these cultures are fairly insular now, because they are
so well developed. So much of the communication occurs in this /shorthand/.

And you can see it by trying to go function in a related world: Wikipedia, for
some abstract mathematical structure — oh, these are all technical definitions!

There is so much /culture/. So the question is, how to, see Book: Future of
Education, transfer this element of the culture, to make tools that have some of
the culture embodied in them?

- [ ] get the future of education quote, bring that book.

*** We want breakouts. How do we get them?

How do we get breakouts, links between fields?

Because obviously it happens! Abstractions let people link fields.

And it’s very powerful when it does. DNA using information theory, etc etc

How does the way out of the climate crisis, issues like that not depend on
developing a deep intuition around control systems, physical models, physical
simulations and nonlinear feedback ?

** One way: GJS, Code as Comms

One way to do it, pursued by GJS, is to champion “code is for communication”.
But it’s obviously not JUST that.

*** Problems with Code as Comms

The problem with Literate Programming is that you really want a culture of
literate programming, so that you can build on all of this stuff together. I’m
imagining something like the AI memos, or email but where everyone is reading in
emacs and you can just fire code around, save it etc. Before all of this version
control nonsense.

*** Real Science is Multiplayer

Science is not just about communication. The progression of science has been
inherently multiplayer; so the __nice__ thing about the PDF is you can print it
out and sit in your chair and puzzle over what you’re seeing. And then make
notes in the margins that potentially lead to the next brick in the wall.

*** Dynamic == Too Seductive

It is too seductive, people just want the code to __work__: but the alternative
is what, thrashing around with python code?

Something odd happens when the machine is involved. We GLEEFULLY abstain from
ironing out and understanding it all, because the machine can perform the thing!
Maybe that is like some old-timer in the lab who can work the fridge. But then
we lose the knowledge.

*** Literate is One Way
ALSO: as a reader, I can't participate in the cultural thing that created the
document!

This is also the problem with notebooks. They are often so dependent on the
user's local environment... I read the thing but it was not designed to be
shared. Yes, I know about Docker etc...

SO — and this is personal for me — I want to bring more of the teaching and
explaining back into real software, into things you can use for real work in a
lab.

*** Does that exist? Weaknesses

But a WEAKNESS with existing stuff is that it’s all geared toward presentations.
3b1b style, for example. Brilliant! But it’s a presentation. It’s not a “viewer”
where I can check out my own transformations, play, etc etc

*** Other Takes

Other Takes on this idea, beyond Literate Programming:

Dynamicland, Roam, Tool for Thinking community. But tools for what /kinds/ of
thoughts? What do we want to make here?

LOGO is a really good one. Get a picture of LOGO, of Turtle Geometry

[[../images/turtle_geometry.jpeg]]

*** People are not doing "real work" in these systems

Same with LOGO, with Notebooks. you have to bail out at some point.

** Personal History

*** Why do I care?

I started with Lisp, solvers, games: get the quote from Engelberg.

#+begin_quote
Just for grins, I've attached a snapshot of what I'm doing right now with
Chocolate Fix in Clojure. If you've never worked with Lisp, you'll probably find
the program to be completely inscrutable, but I assure you, it's an elegant
thing of beauty :) . Anyway, this will at least give you a small taste of what
the language looks like.
#+end_quote

Fascinated by writing, Literate Programming, total sucker for that sort of
thing.

So I was a total sucker for SICP and then Book: SICM, the bibles.

Also a sucker for the Zettelkasten idea.

*** Building developer tools — but wtf does that even mean?

I want to get myself across from engineering to physics to making etc...

** People Hate Tools

Then we get to the Google gig. We have this __rot__ going on, where __tools for
thought__ is championed outside the world — often by people that are very
idealistic and thing that this is the way things __should work__ — inherently
gifty, Gift Economy like.

But then the folks using the tools despise the tools. And the toolmakers get
heat for not using them, because it’s so tough. Rare exceptions.

Thrashing around with python and build systems... that is NOT what folks finding
the deep principles behind QM were doing, there is no way it is going to lead to
discoveries here.

It is all ergonomically really bad.

*** Why?

Why? Well, we __know__ that there are certain __ways__ of writing programs that
can be parallelized, for example. (Notes about how it __should__, or could,
work.)

same with autodiff, serialization… you can bake these into the tools. Clojure
does this so well. And you just don’t have to think about these problems
anymore.

But we have __not__ been baking into research projects for ML, say, any sense of
what you are trying to do with the code.

** Dynamic Notebook, SICMUtils
#+begin_notes

Reference stuff I talked about in that, and how at Google there is NO lab
notebook even.

Feel free to use
https://roadtoreality.substack.com/p/the-dynamic-notebook?utm_source=url… this
was such a good essay and basically needs to be the talk.
#+end_notes

Anyway, I love the thought that making the physical basis, the various stories
you can tell about a piece of code - more salient, that it might break down
barriers.

I have a desire to __teach__ here! and not by taking notes.

The dream environment is one where just playing in public leaves a record of
what you did, and is shareable. See Zettelkasten for notes on what to do here.
That was the beauty of the Roam promise.

*** What is SICMUtils? what's in it?

Okay, so my take on this problem is SICMUtils.

Big computer algebra system, get the full list of stuff.

integrations with other people's stuff

*** Explanatory Target - how to start?

Physics and the Book: The Road to Reality. The textbook sort of is a starter
pack. It’s a library already, it’s a nurse tree. It purports to tell you
everything! And in principle it’s all computable and full of abstraction
goodies.

And THAT is the culture I want to soak up!

the hard narrative work is done, for these particular stories.

*** Why Textbooks, why physics?

- Why sicmutils? Why play with physics?
- We have this grand human tale, over thousands of years, of figuring out how
  the world works. Of how to model reality.

The library that lives in all of these environments, and is fissionable and extensible.

The idea being that the textbook is explicitly about the subject; but actually a
model of exposition, of scientific communication.

And the __exercises__ are an invitation to publish your own original thoughts,
to participate in the discovery process yourself. But often with no way to
practice the publication part. (The discovery has already happened, so why are
we only practicing getting the answer? The goal is to __share__ it in a way that
ignores someone else.)

And the PIECES the library kicks out are usable elsewhere.

*** Community Involvement

- Nextjournal's Clerk

- Clojurescript, CLojure

- SCI

- Mathbox

** Demos

How to show off? Build up the Lagrangian example?

And then show the actual library? But how does it fit into this narrative?

** How can you Help, ie, conclusion, call to action.

Build stuff like this!
