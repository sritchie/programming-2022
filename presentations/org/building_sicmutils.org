#+STARTUP: indent

#+OPTIONS: num:nil toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

# 1 hour slot, but should be short with time for questions
#+Title: Building SICMUtils, the Atelier of Abstractions

* Building SICMUtils

The Atelier of Abstractions

* SICMUtils
#+begin_notes
- CAS, previewed yesterday
- Computer algebra system, previewed during the keynote
#+end_notes

** ❤️ Open Source ❤️
#+begin_notes
- meant to be ripped off in pieces!
#+end_notes

https://github.com/sicmutils/sicmutils
#+REVEAL_HTML: <img width="100%" src="../images/sicmutils.png">

* Thanks to GJS
#+begin_notes
- uses many techniques from SDF
#+end_notes

(and many others!)

#+REVEAL_HTML: <img height="500" src="../images/gjs.jpg">
#+REVEAL_HTML: <img height="500" src="../images/sdf.jpeg">

* Agenda
#+begin_notes
#+end_notes

- Overview of SICMUtils
- Programming Techniques
- Issues!
- Revealing Demos

* SICMUtils Project goals
#+begin_notes
reiterate:

- trying to write this sweeping history of modern physics
- convinced you need to write AND read in the env
- so: kitchen sink, embeddable in diff envs
#+end_notes

** Library as Workshop / Textbook
#+begin_notes
- library is its own target
- filled with stories
#+end_notes

[[../images/workshop.jpeg]]

** Many Environments
#+begin_notes
- not an environment, it's a library of components
- lives in many places
#+end_notes

- REPL
- Nextjournal
- =org-mode=, these slides
- Clojure, Clojurescript
- Zeugma, any Java environment
- [[https://www.texmacs.org/tmweb/home/welcome.en.html][TexMacs]]
- Roam Research or Obsidian, etc

* What's in the library?
#+begin_notes
- much familiar for lispers
- 27kLOC src, 25kLOC tests
#+end_notes

# Two namespace pictures
#+REVEAL: split data-background="../images/sicmutils_ns.png"
#+REVEAL: split data-background="../images/quad_island.png"

** Numerics
#+begin_notes
- no ratio, complex in JS
- prep the host
#+end_notes

- full numeric tower in JavaScript, up to =Complex=
- dual numbers
- modular arithmetic types
- Quaternions, beyond

** Extensible Generics
#+begin_notes
- generic, extensible functions via protocols, multimethods
- `type` vs `kind`
- show library code
- extended to functions!
#+end_notes

  #+begin_src clojure :results value pp :exports both
((square +) 'x 'y)
  #+end_src

  #+RESULTS:
  : (expt (+ x y) 2)
  :

  #+begin_src clojure :results value pp :exports both
((square +) 1 2)
  #+end_src

  #+RESULTS:
  : 9
  :

** Examples of Generics
 #+begin_notes
 - sample of the extensible methods...
 - you can make your own of course
 #+end_notes

 #+begin_src clojure
 [sicmutils.generic
  ,* + - / divide
  negate
  negative? infinite?
  invert
  abs
  sqrt
  quotient remainder modulo
  floor ceiling
  integer-part fractional-part
  expt
  exp exp2 exp10
  log log2 log10
  gcd lcm
  exact-divide
  square cube
  cos sin tan
  cot sec csc
  atan
  acos asin acot asec acsc
  cosh sinh tanh coth sech csch
  acosh asinh atanh acoth asech acsch
  sinc tanc sinhc tanhc
  make-rectangular make-polar
  real-part imag-part
  magnitude angle conjugate
  transpose trace determinant dimension
  dot-product inner-product outer-product cross-product
  partial-derivative Lie-derivative
  solve-linear solve-linear-left solve-linear-right
  simplify]
  #+end_src

** Symbolic Computation
#+begin_notes
- simplifier, rules
#+end_notes

#+begin_src clojure :results value pp :exports both
(+ (square (sin 'x))
   (square (cos 'x)))
#+end_src

#+RESULTS:
: (+ (expt (sin x) 2) (expt (cos x) 2))
:

#+begin_src clojure :results value pp :exports both
(simplify
 (+ (square (sin 'x))
    (square (cos 'x))))
#+end_src

#+RESULTS:
: 1
:

** "Compound" Data Types
#+begin_notes
- show off
#+end_notes

- vector, matrix, up, down structures
- polynomial, rational function
- power series
- quaternions

** "Literals", ie, symbolic-like things:

- literal numbers
- literal functions
- symbols, or =literal-number=
- literal vectors, matrices etc

** Pattern Matching DSL
#+begin_notes
implemented in SDF, extended to Clojure
#+end_notes

#+begin_src clojure
(rule (/ (* ??u ?x ??v) (sqrt ?x))
      =>
      (* ??u (sqrt ?x) ??v))
#+end_src

** Pattern Combinators

#+begin_src clojure
(let [r (while (fn [l _] (< l 100))
          (rule ?x => (? #(inc (% '?x)))))]
  (= 101 (r 12)))
#+end_src

#+ATTR_REVEAL: :frag t :frag_idx 2
Literal Derivative:

#+ATTR_REVEAL: :frag t :frag_idx 2
#+begin_src clojure
(choice
 (rule (D ?f)           => ((expt D 2) ?f))
 (rule ((expt D ?n) ?f) => ((expt D (? #(inc (% '?n)))) ?f))
 (rule ?f               => (D ?f)))
#+end_src

** Renderers
#+begin_notes
- obvious, open thing, S-expressions
- simplifier
#+end_notes

Infix:

#+begin_src clojure :exports both
(->infix
 (+ (square (sin 'eta))
    (cube (tan 'phi_2))))
#+end_src

#+RESULTS:
: sin²(η) + (tan(φ₂))³

TeX:

#+begin_src clojure :exports both
(->TeX
 (+ (square (sin 'eta))
    (cube (tan 'phi_2))))
#+end_src

#+RESULTS:
: {\sin}^{2}\left(\eta\right) + {\left(\tan\left({\phi}_2\right)\right)}^{3}

** Renderers

JavaScript Source Renderer

#+begin_src clojure :results value output :exports both
(println
 (->JavaScript
  (+ (square (sin 'eta))
     (cube (tan 'phi-2)))))
#+end_src

#+RESULTS:
: function(eta, phi_2) {
:   return Math.pow(Math.sin(eta), 2) + Math.pow(Math.tan(phi_2), 3);
: }

** Function Compilation
#+begin_notes
- reuses all the stuff above
- you can do this for matrices too!
#+end_notes

#+begin_src clojure :exports both
(defn my-fn [x y]
  (+ x
     (sin y)
     (square (cos 'x))
     (square (sin 'x))
     (cube (sin y))))

(binding [*mode* :source]
  (compile-fn my-fn))
#+end_src

#+RESULTS:
: (clojure.core/fn [x45929 x45930]
:   (clojure.core/let [G0000000000000000 (Math/sin x45930)]
:     (clojure.core/+ (clojure.core/*
:                      -1.0
:                      G0000000000000000
:                      (Math/pow (Math/cos x45930) 2.0))
:                     x45929
:                     (clojure.core/* 2.0 G0000000000000000)
:                    1.0)))

** Functional Numerical Methods

- Univariate and multivariate minimization
- Polynomial and RF interpolation
- Richardson Extrapolation
- (FUNCTIONAL!) Numerical quadrature
- numeric derivatives
- Native ODE solvers
- ...

** Automatic Differentiation

- Forward mode,
- immutable reverse mode!

** Physics

- Hamiltonian and Lagrangian mechanics
- Differential Geometry
- Manifolds, Coordinate Systems
- Tensor Calculus
- Geometric Algebra

** Animations

- Mathbox
- JSXGraph

* SICMUtils Programming Techniques
#+begin_notes
- gotten easier as we go!
- how?
#+end_notes

- Extensible Generics
  Stick with Clojure
- Combinators
- DSLs, Pattern Matching

** Type vs Kind
#+begin_notes
- protocol vs multimethod dispatch
- protocols are fast, multimethods are flexible
#+end_notes

#+begin_src  clojure :results value pp :exports both
(map kind [(make-rectangular 1 2) 10 {:k "v"}])
#+end_src

#+RESULTS:
: (:sicmutils.complex/complex
:  java.lang.Long
:  clojure.lang.PersistentArrayMap)
:

** Constrained Extensibility
#+begin_notes
- On a per type basis
- but folks can install their own generics too!
#+end_notes

#+begin_src clojure
(derive ::square-matrix ::matrix)
(derive ::column-matrix ::matrix)
(derive ::row-matrix ::matrix)
(derive ::matrix ::f/cofunction)

(defmethod g/mul [::matrix ::matrix] [a b]
  (mul a b))

(defmethod g/mul [::v/scalar ::matrix] [n a]
  (scalar*matrix n a))

(defmethod g/mul [::matrix ::v/scalar] [a n]
  (matrix*scalar a n))
#+end_src

** Stick with Clojure
#+begin_notes
#+end_notes

- Different Environments, CLJS
- Small # of core data structures
- immutability everywhere

** Pragmatic Core

#+begin_src clojure
[] {} #{} () :keyword 'sym

#quaternion [1 2 3 4]

#complex [2 3]
#+end_src

** Combinators

- pattern matching
- many of the arithmetic types have this built in
- numerical methods work too, we had the =infinite= combinator.

** DSL, Pattern Matching:

#+ATTR_REVEAL: :code_attribs data-line-numbers="3-6|8-12|14-17|19-24"
#+begin_src clojure
(require '[pattern.rule :as r :refer [ruleset =>]])

(defn unary-elimination [& ops]
  (let [op-set (into #{} ops)]
    (ruleset
     ((? _ op-set) ?x) => ?x)))

(defn constant-elimination [op constant]
  (letfn [(filter-constants [{xs '??xs}]
            (remove #{constant} xs))]
    (ruleset
     (~op ??xs) => (~op (?? ~filter-constants)))))

(defn constant-promotion [op constant]
  (ruleset
   (~op _ ~constant) => ~constant
   (~op ~constant _) => ~constant))

(def my-simplify
  (r/rule-simplifier
   (unary-elimination '+ '*)
   (constant-elimination '+ 0)
   (constant-elimination '* 1)
   (constant-promotion '* 0)))
#+end_src

#+RESULTS:
| #'prez/unary-elimination    |
| #'prez/constant-elimination |
| #'prez/constant-promotion   |
| #'prez/my-simplify          |

#+REVEAL: split
#+begin_src clojure :results value pp :exports both
(my-simplify
 '(cos (+ 0 (+ 0 12 0) (* 1 x))))
#+end_src

#+RESULTS:
: (cos (+ 12 x))
:

** Operator Simplification

  #+begin_src clojure
(def simplify-operator-name
  (rule-simplifier
   (rules/associative '+ '*)
   rules/exponent-contract
   (rules/unary-elimination '+ '*)))
  #+end_src

** Multi-Stage Programming
#+begin_notes
- just as easily you could be sending operations off to matrix library... there
  is no reason to prefer Python etc.

  Everything fast there is staged down to FORTRAN etc.
#+end_notes

#+begin_src clojure :exports both
(defn my-fn [x y]
  (+ x
     (sin y)
     (square (cos 'x))
     (square (sin 'x))
     (cube (sin y))))

(binding [*mode* :source]
  (compile-fn my-fn))
#+end_src

#+RESULTS:
: (clojure.core/fn [x45929 x45930]
:   (clojure.core/let [G0000000000000000 (Math/sin x45930)]
:     (clojure.core/+ (clojure.core/*
:                      -1.0
:                      G0000000000000000
:                      (Math/pow (Math/cos x45930) 2.0))
:                     x45929
:                     (clojure.core/* 2.0 G0000000000000000)
:                    1.0)))

** Clojure Community
#+begin_notes
It has gotten EASIER to add to it as it's gone.
#+end_notes

- Sussman et. al.
- Colin Smith
- Clerk: Martin Kavalar, Jack Rusher, Nextjournal team
- maria.cloud
- SCI, CLJ-Kondo: Michiel Borkent (@borkdude)

* Hard?

- No types so far
- what's the right way to introspect the library?
- Context

* Demos
#+begin_notes
Over to Clerk again.
#+end_notes

* Thanks!
#+begin_notes
questions?
#+end_notes

Sam Ritchie, Mentat Collective

[[https://twitter.com/sritchie][@sritchie]]

Slides, Demos live at https://github.com/sritchie/programming-2022
